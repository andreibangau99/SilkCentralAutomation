def agentLabel = ""
def rep = "AAA AAA"
pipeline{
    agent any
    options {
        disableConcurrentBuilds()
        buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
    }
    parameters {
        string(name: 'testsToRun',description: '' )
        string(name: 'runnerJarPath', defaultValue: 'D:\\regDaySeptember\\ALM_Octane_Shift-2.389-SNAPSHOT\\resources\\Silk Central automation\\test-execution\\octane-shift-execution-wrapper-4.37-SNAPSHOT.jar', description: "")
        string(name: 'suiteId',description: '' )
        string(name: 'suiteRunId',description: '' )
    }

    stages {

        stage('setTag') {

            steps {
                script {
                    rep = "AAAA QAQAAA"
                    dir('test-execution') {
                        echo "${rep.replaceAll('A','b')}"
                        bat 'npm install'
                        bat 'npm run build'
                        bat 'echo getting execution keywords from the test suite'
                        bat 'npm run start-init-execution-keywords %suiteId%'
                        
                        agentLabel = readFile('execution_keywords.txt').trim()
                        
                    }
                }

            }
        }

        stage('Run Tests') {
            agent{
                label agentLabel
            }
            steps {
                script {
                    dir('test-execution') {
                        bat 'npm install'
                        bat 'npm run build'
                        bat 'call npm run start-process-executor "%testsToRun%" "${runnerJarPath.replaceAll(\'D\',\'c\')}" %suiteId% %suiteRunId%'
                        try {
                            bat 'call command_to_execute.bat'
                        } catch(err) {
                            bat 'echo Tests failed! Continue...'
                        }
                    }
                }
                archiveArtifacts artifacts: test-execution//command_to_execute.bat,test-execution//testResults//**', onlyIfSuccessful: false
                junit allowEmptyResults: true, testResults: 'test-execution//testResults//*//*.xml'

            }

        }

    }
    post {
        always {
            cleanWs()
        }
        aborted {
            cleanWs()
            bat 'echo abort'
        }
    }

}
